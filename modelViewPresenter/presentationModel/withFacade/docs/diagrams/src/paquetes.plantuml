@startuml mastermind
class ConsoleView as "usantatecla.\nmastermind.views.\nconsole.ConsoleView"
class GraphicsView as "usantatecla.\nmastermind.views.\nconsole.GraphicsView"
class Logic as "usantatecla.\nmastermind.controllers.\nLogic"
class View as "usantatecla.mastermind.views.\nView" 

class  usantatecla.mastermind.ConsoleMastermind{
    + {static} main(String[])
    # createView(Logic): View
}
usantatecla.mastermind.Mastermind <|-down- usantatecla.mastermind.ConsoleMastermind

class  usantatecla.mastermind.GraphicsMastermind{
    + {static} main(String[])
    # createView(Logic): View
}
usantatecla.mastermind.Mastermind <|-down- usantatecla.mastermind.GraphicsMastermind

abstract class  usantatecla.mastermind.Mastermind{
    # Mastermind()
    # {abstract} createView(Logic): View
    # play()
}


usantatecla.mastermind.Mastermind .down.> Logic
usantatecla.mastermind.Mastermind *-down-> View
usantatecla.mastermind.GraphicsMastermind .down.> GraphicsView
usantatecla.mastermind.ConsoleMastermind .down.> ConsoleView

@enduml

@startuml usantatecla.mastermind.views
class Logic as "usantatecla.\nmastermind.controllers.\nLogic"

abstract class usantatecla.mastermind.views.WithLogicView {
    + WithLogicView(Logic)
}
usantatecla.mastermind.views.WithLogicView *-down-> Logic

abstract class  usantatecla.mastermind.views.ColorView{
    + {static} INITIALS: char[]
    # color: Color
    # ColorView()
    # ColorView(Color)
    + {static} getInstance(char): Color
    + allInitials(): String
    # abstract resultInitials(int): String
}

abstract class  usantatecla.mastermind.views.ErrorView{
    + MESSAGES: String[]
    # error: Error
    # ErrorView()
    + ErrorView(Error)
    # abstract colorInitials(): String
}

enum  usantatecla.mastermind.views.Message{
    + ATTEMPTS
    + SECRET
    + RESUME
    + RESULT
    + PROPOSED_COMBINATION
    + TITLE
    + WINNER
    + LOOSER
    - message: String
    ~ MessageView(String)
    + getMessage(): String
}

abstract class  usantatecla.mastermind.views.View{
    + View(Logic)
    + interact()
    # {abstract} start()
    # {abstract} propose(): boolean
    # {abstract} isNewGame(): boolean
}
usantatecla.mastermind.views.View -up-|> usantatecla.mastermind.views.WithLogicView
usantatecla.mastermind.views.View .down.> Logic

@enduml

@startuml usantatecla.mastermind.console
class Logic as "usantatecla.\nmastermind.controllers.\nLogic"
enum Error as "usantatecla.\nmastermind.types.\nError"
enum Color as "usantatecla.\nmastermind.types.\nColor"
abstract class WithLogicView as "usantatecla.\nmastermind.views.\nWithLogicView"
abstract class View as "usantatecla.\nmastermind.views.\nView"
abstract class ColorView as "usantatecla.\nmastermind.views.\nColorView"
abstract class ErrorView as "usantatecla.\nmastermind.views.\nErrorView"
enum Message as "usantatecla.\nmastermind.views.\nMessage"
class Console as "usantatecla.utils.\nConsole"
class YesNoDialog as "usantatecla.utils.\nYesNoDialog"
enum ColorCode as "usantatecla.utils.\nColorCode"

class usantatecla.mastermind.views.console.ConsoleView {
    + ConsoleView(Logic)
    # start()
    # propose() : boolean
    # isNewGame() : boolean
}
usantatecla.mastermind.views.console.ConsoleView -up-|> View
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.StartView
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.ProposalView
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.ResumeView
usantatecla.mastermind.views.console.ConsoleView .down.> Logic

class usantatecla.mastermind.views.console.ResumeView {
    ~ ResumeView(Logic)
    ~ interact() : boolean
}
usantatecla.mastermind.views.console.ResumeView -up-|> WithLogicView
usantatecla.mastermind.views.console.ResumeView .down.> Logic
usantatecla.mastermind.views.console.ResumeView .down.> Message
usantatecla.mastermind.views.console.ResumeView .down.> YesNoDialog

class usantatecla.mastermind.views.console.StartView {
    - StartView(Logic)
    ~ interact()
}
usantatecla.mastermind.views.console.StartView -up-|> WithLogicView
usantatecla.mastermind.views.console.StartView *-down-> usantatecla.mastermind.views.console.SecretCombinationView
usantatecla.mastermind.views.console.StartView .down.> Console
usantatecla.mastermind.views.console.StartView .down.> Message

class usantatecla.mastermind.views.console.GameView {
    ~ GameView(Logic, ProposedCombinationView)
    ~ write()
    ~ isWinnerOrLooser() : boolean
}
usantatecla.mastermind.views.console.GameView -up-|> WithLogicView
usantatecla.mastermind.views.console.GameView *-down-> usantatecla.mastermind.views.console.ProposedCombinationView
usantatecla.mastermind.views.console.GameView *-down-> usantatecla.mastermind.views.console.SecretCombinationView
usantatecla.mastermind.views.console.GameView *-down-> usantatecla.mastermind.views.console.ResultView
usantatecla.mastermind.views.console.GameView .down.> usantatecla.mastermind.views.console.AttemptsView
usantatecla.mastermind.views.console.GameView .down.> Logic
usantatecla.mastermind.views.console.GameView .down.> Message
usantatecla.mastermind.views.console.GameView .down.> Console

class usantatecla.mastermind.views.console.ProposalView {
    ~ ProposalView(Logic)
    ~ interact() : boolean
}
usantatecla.mastermind.views.console.ProposalView -up-|> WithLogicView
usantatecla.mastermind.views.console.ProposalView *-down-> usantatecla.mastermind.views.console.GameView
usantatecla.mastermind.views.console.ProposalView *-down-> usantatecla.mastermind.views.console.ProposedCombinationView
usantatecla.mastermind.views.console.ProposalView .down.> usantatecla.mastermind.views.console.ErrorView
usantatecla.mastermind.views.console.ProposalView .down.> Logic
usantatecla.mastermind.views.console.ProposalView .down.> Color
usantatecla.mastermind.views.console.ProposalView .down.> Error

class usantatecla.mastermind.views.console.ProposedCombinationView {
    ~ ProposedCombinationView(Logic)
    ~ write(int)
    ~ read(): List<Color>
}
usantatecla.mastermind.views.console.ProposedCombinationView -up-|> WithLogicView
usantatecla.mastermind.views.console.ProposedCombinationView .down.> usantatecla.mastermind.views.console.ColorView
usantatecla.mastermind.views.console.ProposedCombinationView .down.> Logic
usantatecla.mastermind.views.console.ProposedCombinationView .down.> Color
usantatecla.mastermind.views.console.ProposedCombinationView .down.> Message
usantatecla.mastermind.views.console.ProposedCombinationView .down.> Console

class usantatecla.mastermind.views.console.SecretCombinationView {
    ~ SecretCombinationView(Logic)
    ~ writeln()
}
usantatecla.mastermind.views.console.SecretCombinationView -up-|> WithLogicView
usantatecla.mastermind.views.console.SecretCombinationView .down.> Logic
usantatecla.mastermind.views.console.SecretCombinationView .down.> Message
usantatecla.mastermind.views.console.SecretCombinationView .down.> Console

class usantatecla.mastermind.views.console.ResultView {
    ~ ResultView(Logic)
    ~ writeln(int)
}
usantatecla.mastermind.views.console.ResultView -up-|> WithLogicView
usantatecla.mastermind.views.console.ResultView .down.> Logic
usantatecla.mastermind.views.console.ResultView .down.> Message
usantatecla.mastermind.views.console.ResultView .down.> Console

class usantatecla.mastermind.views.console.AttemptsView {
    ~ AttemptsView(Logic)
    + writeln()
}
usantatecla.mastermind.views.console.AttemptsView -up-|> WithLogicView
usantatecla.mastermind.views.console.AttemptsView .down.> Logic
usantatecla.mastermind.views.console.AttemptsView .down.> Console
usantatecla.mastermind.views.console.AttemptsView .down.> Message

class usantatecla.mastermind.views.console.ColorView {
    ~ ColorView()
    ~ ColorView(Color)
    # resultInitials(int) : String
    ~ write()
}
usantatecla.mastermind.views.console.ColorView -up-|> ColorView
usantatecla.mastermind.views.console.ColorView .down.> ColorCode
usantatecla.mastermind.views.console.ColorView .down.> Console
usantatecla.mastermind.views.console.ColorView .down.> Color

class usantatecla.mastermind.views.console.ErrorView {
    ~ ErrorView()
    ~ ErrorView(Error)
    ~ writeln()
    # colorInitials() : String
}

usantatecla.mastermind.views.console.ErrorView -up-|> ErrorView
usantatecla.mastermind.views.console.ErrorView ..> Error
usantatecla.mastermind.views.console.ErrorView ..> Console
usantatecla.mastermind.views.console.ErrorView ..> usantatecla.mastermind.views.console.ColorView

@enduml

@startuml usantatecla.mastermind.controllers
class Game as "usantatecla.\nmastermind.models.\nGame"
abstract class Combination as "usantatecla.\nmastermind.models.\nCombination"
enum Error as "usantatecla.\nmastermind.types.\nError"
enum Color as "usantatecla.\nmastermind.types.\nColor"

abstract class  usantatecla.mastermind.controllers.Controller{
    ~ Controller(Game)
    + getWidth(): int
}
usantatecla.mastermind.controllers.Controller *-down-> Game
usantatecla.mastermind.controllers.Controller .down.> Combination

class  usantatecla.mastermind.controllers.Logic{
    + Logic()
    + clearGame()
    + addProposedCombination(List<Color>): Error
    + isWinner(): boolean
    + isLooser(): boolean
    + getAttempts(): int
    + getColors(int): List<Color>
    + getBlacks(int): int
    + getWhites(int): int
    + getWidth(): int
}
usantatecla.mastermind.controllers.Logic *-down-> usantatecla.mastermind.controllers.ResumeController
usantatecla.mastermind.controllers.Logic *-down-> usantatecla.mastermind.controllers.StartController
usantatecla.mastermind.controllers.Logic *-down-> usantatecla.mastermind.controllers.PlayController
usantatecla.mastermind.controllers.Logic *-down-> Game
usantatecla.mastermind.controllers.Logic .down.> Color
usantatecla.mastermind.controllers.Logic .down.> Error

class  usantatecla.mastermind.controllers.PlayController{
    + ProposalController(Game)
    + addProposedCombination(List<Color>): Error
    + isWinner(): boolean
    + isLooser(): boolean
    + getAttempts(): int
    + getColors(int): List<Color>
    + getBlacks(int): int
    + getWhites(int): int
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.PlayController
usantatecla.mastermind.controllers.PlayController .down.> Game
usantatecla.mastermind.controllers.PlayController .down.> ProposedCombination
usantatecla.mastermind.controllers.PlayController .down.> Color
usantatecla.mastermind.controllers.PlayController .down.> Error

class  usantatecla.mastermind.controllers.ResumeController{
    + ResumeController(Game)
    + clearGame()
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.ResumeController
usantatecla.mastermind.controllers.ResumeController .down.> Game

class  usantatecla.mastermind.controllers.StartController{
    + StartController(Game)
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.StartController
usantatecla.mastermind.controllers.StartController .down.> Game
@enduml

@startuml usantatecla.mastermind.models
enum Color as "usantatecla.\nmastermind.types.\nColor"

abstract class usantatecla.mastermind.models.Combination {
    - {static} WIDTH: int
    # colors: List<Color>
    # Combination()
    + {static} getWidth(): int
}
usantatecla.mastermind.models.Combination *-down-> "*" Color

class usantatecla.mastermind.models.Game {
    - {static} MAX_LONG: int
    - secretCombination: SecretCombination
    - proposedCombination: List<ProposedCombination>
    - results: List<Result>
    - attempts: int
    + Game()
    + clear()
    + addProposeCombination(ProposedCombination)
    + isLooser(): boolean
    + isWinner(): boolean
    + getAttempts(): int
    + getProposedCombination(int): ProposedCombination
    + getResult(int): Result
}
usantatecla.mastermind.models.Game *-down-> usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.Game *-down-> "0..*" usantatecla.mastermind.models.Result
usantatecla.mastermind.models.Game *-down-> "0..*" usantatecla.mastermind.models.ProposedCombination

class usantatecla.mastermind.models.ProposedCombination {
    ~ contains(Color, int): boolean
    ~ contains(Color): boolean
    + getColors(): List<Color>
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.ProposedCombination ..> Color

class usantatecla.mastermind.models.SecretCombination {
    ~ SecretCombination()
    ~ getResult(ProposedCombination): Result
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.SecretCombination ..> usantatecla.mastermind.models.Result
usantatecla.mastermind.models.SecretCombination ..> usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.SecretCombination ..> Color

class usantatecla.mastermind.models.Result {
    - blacks: int
    - whites: int
    ~ Result(int, int)
    ~ isWinner(): boolean
    + getBlacks(): int
    + getWhites(): int
}

usantatecla.mastermind.models.Result -down..> usantatecla.mastermind.models.Combination

@enduml

@startuml usantatecla.mastermind.types
enum usantatecla.mastermind.types.Color {
    + RED
    + BLUE
    + YELLOW
    + GREEN
    + ORANGE
    + PURPLE
    + NULL
    ~ {static} length(): int
    + isNull(): boolean
}

enum usantatecla.mastermind.types.Error {
    + DUPLICATED
    + WRONG_CHARACTERS
    + WRONG_LENGTH
    + NULL
    + isNull(): boolean
}
@enduml

@startuml usantatecla.utils
class BufferedReader as "java.io.BufferedReader"{}

enum usantatecla.utils.views.ColorCode{
    + RED
    + BLUE
    + YELLOW
    + GREEN
    + ORANGE
    + PURPLE
    + RESET_COLOR
    - color: String
    ~ ColorCode(String)
    + getColor(): String
    + {static} getColorByIndex(int): String
}

class usantatecla.utils.views.Console{
    - {static} console: Console
    + {static} getInstance(): Console
    + readString(String): String
    + readString(): String
    + readInt(String): int
    + readChar(String): char
    + writeln()
    + write(String)
    + writeln(String)
    + write(char)
    - writeError(String)
}
usantatecla.utils.views.Console *-down-> BufferedReader

class  usantatecla.utils.views.YesNoDialog{
    - {static} AFIRMATIVE: char
    - {static} NEGATIVE: char
    - {static} QUESTION: String
    - {static} MESSAGE: String
    + YesNoDialog()
    + read(String): boolean
    - {static} isAfirmative(char): boolean
    - {static} isNegative(char): boolean
}
usantatecla.utils.views.YesNoDialog ..> usantatecla.utils.views.Console
@enduml
