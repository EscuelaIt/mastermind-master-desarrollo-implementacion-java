@startuml mastermind
class Logic as "usantatecla.\nmastermind.controllers.\nLogic"
class View as "usantatecla.\nmastermind.views.\nView"
interface AcceptorController as "usantatecla.\nmastermind.controllers.\nAcceptorController"

class  usantatecla.mastermind.Mastermind{
    # Mastermind()
    # play()
    + {static} main(String[])
}
usantatecla.mastermind.Mastermind *-down-> View
usantatecla.mastermind.Mastermind *-down-> Logic
usantatecla.mastermind.Mastermind .down.> AcceptorController

@enduml

@startuml usantatecla.mastermind.views
abstract class Controller as "usantatecla.\nmastermind.controllers.\nController"
class PlayController as "usantatecla.\nmastermind.controllers.\nPlayController"
class ResumeController as "usantatecla.\nmastermind.controllers.\nResumeController"
class StartController as "usantatecla.\nmastermind.controllers.\nStartController"
interface ControllersVisitor as "usantatecla.\nmastermind.controllers.\nControllersVisitor"
interface AcceptorController as "usantatecla.\nmastermind.controllers.\nAcceptorController"
enum Color as "usantatecla.\nmastermind.types.\nColor"
enum Error as "usantatecla.\nmastermind.types.\nError"
class Console as "usantatecla.\nutils.\nConsole"
class YesNoDialog as "usantatecla.\nutils.\nYesNoDialog"
abstract class Command as "usantatecla.\nutils.\nCommand"
abstract class Menu as "usantatecla.\nutils.\nMenu"
enum ColorCode as "usantatecla.\nutils.\nColorCode"

class  usantatecla.mastermind.views.AttemptsView{
    - playController: PlayController
    ~ AttemptsView(PlayController)
    ~ writeln()
}

usantatecla.mastermind.views.AttemptsView .down.> Console
usantatecla.mastermind.views.AttemptsView .down.> PlayController

class  usantatecla.mastermind.views.ColorView{
    + {static} INITIALS: char[]
    ~ ColorView()
    ~ ColorView(Color)
    + {static} getInstance(char): Color
    + allInitials(): String
    ~ resultInitials(int): String
    + write()
}
usantatecla.mastermind.views.ColorView *-down-> Color
usantatecla.mastermind.views.ColorView .down.> Console
usantatecla.mastermind.views.ColorView .down.> ColorCode

abstract class  usantatecla.mastermind.views.Command{
    # Command(String, PlayController)
}
Command <|-down- usantatecla.mastermind.views.Command
usantatecla.mastermind.views.Command *-down-> PlayController

class  usantatecla.mastermind.views.ErrorView{
    + MESSAGES: String[]
    ~ ErrorView()
    + ErrorView(Error)
    + writeln()
    ~ colorInitials(): String
}
usantatecla.mastermind.views.ErrorView *-down-> Error
usantatecla.mastermind.views.ErrorView .down.>  usantatecla.mastermind.views.ColorView
usantatecla.mastermind.views.ErrorView .down.> Console

class  usantatecla.mastermind.views.GameView{
    ~ GameView(PlayController)
}
usantatecla.mastermind.views.GameView .down.> usantatecla.mastermind.views.AttemptsView
usantatecla.mastermind.views.GameView .down.> usantatecla.mastermind.views.SecretCombinationView
usantatecla.mastermind.views.GameView .down.> usantatecla.mastermind.views.ProposedCombinationView
usantatecla.mastermind.views.GameView .down.> usantatecla.mastermind.views.ResultView
usantatecla.mastermind.views.GameView .down.> usantatecla.mastermind.views.Message
usantatecla.mastermind.views.GameView .down.> PlayController
usantatecla.mastermind.views.GameView .down.> Console

enum  usantatecla.mastermind.views.Message{
    ~ ATTEMPTS
    ~ SECRET
    ~ RESUME
    ~ RESULT
    ~ PROPOSED_COMBINATION
    ~ TITLE
    ~ WINNER
    ~ LOOSER
    ~ PROPOSE_COMMAND
    ~ UNDO_COMMAND
    ~ REDO_COMMAND
    - message: String
    - Message(String)
    + getMessage(): String
}

class  usantatecla.mastermind.views.PlayMenu{
    ~ PlayMenu(PlayController)
}
Menu <|-down- usantatecla.mastermind.views.PlayMenu
usantatecla.mastermind.views.PlayMenu .down.> usantatecla.mastermind.views.ProposeCommand
usantatecla.mastermind.views.PlayMenu .down.> usantatecla.mastermind.views.UndoCommand
usantatecla.mastermind.views.PlayMenu .down.> usantatecla.mastermind.views.RedoCommand
usantatecla.mastermind.views.PlayMenu .down.> PlayController

class  usantatecla.mastermind.views.PlayView{
    ~ interact(PlayController)
}
usantatecla.mastermind.views.PlayView .down.> PlayController
usantatecla.mastermind.views.PlayView .down.> usantatecla.mastermind.views.PlayMenu

class  usantatecla.mastermind.views.ProposeCommand{
    ~ ProposeCommand(PlayController)
    # execute()
    # isActive(): boolean
}
usantatecla.mastermind.views.Command <|-down- usantatecla.mastermind.views.ProposeCommand
usantatecla.mastermind.views.ProposeCommand .down.> usantatecla.mastermind.views.ProposedCombinationView
usantatecla.mastermind.views.ProposeCommand .down.> usantatecla.mastermind.views.ErrorView
usantatecla.mastermind.views.ProposeCommand .down.> usantatecla.mastermind.views.RedoCommand
usantatecla.mastermind.views.ProposeCommand .down.> usantatecla.mastermind.views.Message
usantatecla.mastermind.views.ProposeCommand .down.> PlayController
usantatecla.mastermind.views.ProposeCommand .down.> Color
usantatecla.mastermind.views.ProposeCommand .down.> Error

class  usantatecla.mastermind.views.ProposedCombinationView{
    ~ ProposedCombinationView(PlayController)
    ~ write(int)
    ~ read(): List<Color>
}
usantatecla.mastermind.views.ProposedCombinationView *-down-> PlayController
usantatecla.mastermind.views.ProposedCombinationView .down.> usantatecla.mastermind.views.Message
usantatecla.mastermind.views.ProposedCombinationView .down.> usantatecla.mastermind.views.ColorView
usantatecla.mastermind.views.ProposedCombinationView .down.> Color
usantatecla.mastermind.views.ProposedCombinationView .down.> Console

class  usantatecla.mastermind.views.RedoCommand{
    ~ RedoCommand(PlayController)
    # execute()
    # isActive(): boolean
}
usantatecla.mastermind.views.Command <|-down- usantatecla.mastermind.views.RedoCommand
usantatecla.mastermind.views.RedoCommand .down.> usantatecla.mastermind.views.GameView
usantatecla.mastermind.views.RedoCommand .down.> usantatecla.mastermind.views.Message

class  usantatecla.mastermind.views.ResultView{
    ~ ResultView(PlayController)
    ~ writeln(int)
}
usantatecla.mastermind.views.ResultView *-down-> PlayController
usantatecla.mastermind.views.ResultView .down.> usantatecla.mastermind.views.Message
usantatecla.mastermind.views.ResultView .down.> Console

class  usantatecla.mastermind.views.ResumeView{
    ~ interact(ResumeController)
}
usantatecla.mastermind.views.ResumeView .down.> ResumeController
usantatecla.mastermind.views.ResumeView .down.> usantatecla.mastermind.views.Message
usantatecla.mastermind.views.ResumeView .down.> YesNoDialog

class  usantatecla.mastermind.views.SecretCombinationView{
    ~ SecretCombinationView(Controller)
    ~ writeln()
}
usantatecla.mastermind.views.SecretCombinationView *-down-> Controller
usantatecla.mastermind.views.SecretCombinationView .down.> usantatecla.mastermind.views.Message
usantatecla.mastermind.views.SecretCombinationView .down.> Console

class  usantatecla.mastermind.views.StartView{
    ~ interact(StartController)
}
usantatecla.mastermind.views.StartView .down.> StartController
usantatecla.mastermind.views.StartView .down.> usantatecla.mastermind.views.SecretCombinationView
usantatecla.mastermind.views.StartView .down.> usantatecla.mastermind.views.Message

class  usantatecla.mastermind.views.UndoCommand{
    ~ UndoCommand(PlayController)
    # execute()
    # isActive(): boolean
}
usantatecla.mastermind.views.Command <|-down- usantatecla.mastermind.views.UndoCommand
usantatecla.mastermind.views.UndoCommand .down.> usantatecla.mastermind.views.GameView
usantatecla.mastermind.views.UndoCommand .down.> PlayController

class  usantatecla.mastermind.views.View{
    + View()
    + interact(AcceptorController)
    + visit(ResumeController)
    + visit(PlayController)
    + visit(StartController)
}
ControllersVisitor <|-down- usantatecla.mastermind.views.View
usantatecla.mastermind.views.View *-down-> usantatecla.mastermind.views.StartView
usantatecla.mastermind.views.View *-down-> usantatecla.mastermind.views.PlayView
usantatecla.mastermind.views.View *-down-> usantatecla.mastermind.views.ResumeView
usantatecla.mastermind.views.View .down.> AcceptorController
usantatecla.mastermind.views.View .down.> StartController
usantatecla.mastermind.views.View .down.> PlayController
usantatecla.mastermind.views.View .down.> ResumeController
@enduml

@startuml usantatecla.mastermind.controllers
abstract class Combination as "usantatecla.\nmastermind.models.\nCombination"
class Session as "usantatecla.\nmastermind.models.\nSession"
class StateValue as "usantatecla.\nmastermind.models.\nStateValue"
enum Color as "usantatecla.\nmastermind.types.\nColor"
enum Error as "usantatecla.\nmastermind.types.\nError"

interface  usantatecla.mastermind.controllers.AcceptorController{
    + accept(ControllersVisitor)
}
usantatecla.mastermind.controllers.AcceptorController .down.> usantatecla.mastermind.controllers.ControllersVisitor

class  usantatecla.mastermind.controllers.Controller{
    ~ Controller(Session)
    + getWidth(): int
}
usantatecla.mastermind.controllers.Controller *-down-> Session

interface  usantatecla.mastermind.controllers.ControllersVisitor{
    ~ visit(StartController)
    ~ visit(PlayController)
    ~ visit(ResumeController)
}
usantatecla.mastermind.controllers.ControllersVisitor .down.> usantatecla.mastermind.controllers.StartController
usantatecla.mastermind.controllers.ControllersVisitor .down.> usantatecla.mastermind.controllers.PlayController
usantatecla.mastermind.controllers.ControllersVisitor .down.> usantatecla.mastermind.controllers.ResumeController

class  usantatecla.mastermind.controllers.Logic{
    + Logic()
    + getController(): AcceptorController
}
usantatecla.mastermind.controllers.Logic *-down-> Session
usantatecla.mastermind.controllers.Logic *-down-> StateValue
usantatecla.mastermind.controllers.Logic *-down-> usantatecla.mastermind.controllers.AcceptorController

class  usantatecla.mastermind.controllers.PlayController{
    + PlayController(Session)
    + addProposeCombination(List<Color>): Error
    + undo()
    + redo()
    + undoable(): boolean
    + redoable(): boolean
    + isWinner(): boolean
    + isLooser(): boolean
    + getAttempts(): int
    + getColors(int): List<Color>
    + getBlacks(int): int
    + getWhites(int): int
    + accept(ControllersVisitor)
}
usantatecla.mastermind.controllers.AcceptorController <|-down- usantatecla.mastermind.controllers.PlayController
usantatecla.mastermind.controllers.PlayController *-down-> usantatecla.mastermind.controllers.PlayController
usantatecla.mastermind.controllers.PlayController *-down-> usantatecla.mastermind.controllers.UndoController
usantatecla.mastermind.controllers.PlayController *-down-> usantatecla.mastermind.controllers.RedoController
usantatecla.mastermind.controllers.PlayController .down.> usantatecla.mastermind.controllers.ControllersVisitor
usantatecla.mastermind.controllers.PlayController .down.> Session
usantatecla.mastermind.controllers.PlayController .down.> Color
usantatecla.mastermind.controllers.PlayController .down.> Error

class  usantatecla.mastermind.controllers.PlayController{
    ~ ProposalController(Session)
    ~ addProposeCombination(List<Color>): Error
    ~ isWinner(): boolean
    ~ isLooser(): boolean
    ~ getAttempts(): int
    ~ getColors(int): List<Color>
    ~ getBlacks(int): int
    ~ getWhites(int): int
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.PlayController
usantatecla.mastermind.controllers.PlayController .down.> Session
usantatecla.mastermind.controllers.PlayController .down.> Combination
usantatecla.mastermind.controllers.PlayController .down.> Color
usantatecla.mastermind.controllers.PlayController .down.> Error

class  usantatecla.mastermind.controllers.RedoController{
    ~ RedoController(Session)
    ~ redo()
    ~ redoable(): boolean
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.RedoController
usantatecla.mastermind.controllers.RedoController .down.> Session

class  usantatecla.mastermind.controllers.ResumeController{
    + ResumeController(Session)
    + resume(boolean)
    + accept(ControllersVisitor)
}
usantatecla.mastermind.controllers.AcceptorController <|-down- usantatecla.mastermind.controllers.ResumeController
usantatecla.mastermind.controllers.ResumeController .down.> usantatecla.mastermind.controllers.ControllersVisitor
usantatecla.mastermind.controllers.ResumeController .down.> Session

class  usantatecla.mastermind.controllers.StartController{
    + StartController(Session)
    + start()
    + accept(ControllersVisitor)
}
usantatecla.mastermind.controllers.AcceptorController <|-down- usantatecla.mastermind.controllers.StartController
usantatecla.mastermind.controllers.StartController .down.> usantatecla.mastermind.controllers.ControllersVisitor
usantatecla.mastermind.controllers.StartController .down.> Session

class  usantatecla.mastermind.controllers.UndoController{
    ~ UndoController(Session)
    ~ undo()
    ~ undoable(): boolean
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.UndoController
usantatecla.mastermind.controllers.UndoController .down.> Session
@enduml

@startuml usantatecla.mastermind.models
enum Color as "usantatecla.\nmastermind.types.\nColor"

class usantatecla.mastermind.models.State {
    ~ state()
    ~ next()
    ~ reset()
    ~ getValueState(): StateValue
}
usantatecla.mastermind.models.State *-down-> usantatecla.mastermind.models.StateValue

enum usantatecla.mastermind.models.StateValue {
    + INITIAL
    + IN_GAME
    + FINAL
    + EXIT
}

abstract class usantatecla.mastermind.models.Combination {
    - {static} WIDTH: int
    # Combination()
    + {static} getWidth(): int
}
usantatecla.mastermind.models.Combination *-down-> "*" Color

class usantatecla.mastermind.models.Game {
    - {static} MAX_LONG: int
    - attempts: int
    ~ Game()
    ~ clear()
    ~ addProposeCombination(List<Color>)
    ~ createMemento(): Memento
    ~ set(Memento)
    ~ isLooser(): boolean
    ~ isWinner(): boolean
    ~ getAttempts(): int
    ~ getColors(int): List<Color>
    ~ getBlacks(int): int
    ~ getWhites(int): int
    ~ getWidth(): int
}
usantatecla.mastermind.models.Game *-down-> usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.Game *-down-> "0..*" usantatecla.mastermind.models.Result
usantatecla.mastermind.models.Game *-down-> "0..*" usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.Game .down.> usantatecla.mastermind.models.Memento
usantatecla.mastermind.models.Game .down.> usantatecla.mastermind.models.Combination
usantatecla.mastermind.models.Game .down.> Color

class usantatecla.mastermind.models.ProposedCombination {
    + ProposedCombination(List<Color>)
    ~ contains(Color, int): boolean
    ~ contains(Color): boolean
    + {static} parse(String): ProposedCombination
    + toString(): String
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.ProposedCombination .down.> Color

class usantatecla.mastermind.models.SecretCombination {
    ~ SecretCombination()
    ~ getResult(ProposedCombination): Result
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.SecretCombination .down.> usantatecla.mastermind.models.Result
usantatecla.mastermind.models.SecretCombination .down.> usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.SecretCombination .down.> Color

class usantatecla.mastermind.models.Result {
    - blacks: int
    - whites: int
    ~ Result(int, int)
    ~ isWinner(): boolean
    ~ getBlacks(): int
    ~ getWhites(): int
    ~ copy(): Result
}
usantatecla.mastermind.models.Result .down.> usantatecla.mastermind.models.Combination

class  usantatecla.mastermind.models.Memento{
    - attempts: int
    + Memento(int, List<String>, List<Integer>, List<Integer>)
    ~ getProposedCombinations(): List<ProposedCombination>
    ~ getResults(): List<Result>
    ~ getAttempts(): int
}
usantatecla.mastermind.models.Memento .down.> usantatecla.mastermind.models.Result
usantatecla.mastermind.models.Memento .down.> usantatecla.mastermind.models.ProposedCombination

class  usantatecla.mastermind.models.Registry{
    - firstPrevious: int
    ~ Registry(Game)
    ~ registry()
    ~ undo(Game)
    ~ redo(Game)
    ~ undoable(): boolean
    ~ redoable(): boolean
    ~ reset()
}
usantatecla.mastermind.models.Registry *-down-> "*"usantatecla.mastermind.models.Memento
usantatecla.mastermind.models.Registry *-down-> usantatecla.mastermind.models.Game

class  usantatecla.mastermind.models.Session{
    + Session()
    + next()
    + addProposeCombination(List<Color>)
    + undoable(): boolean
    + redoable(): boolean
    + undo()
    + redo()
    + clearGame()
    + isWinner(): boolean
    + isLooser(): boolean
    + getWidth(): int
    + getAttempts(): int
    + getColors(int): List<Color>
    + getBlacks(int): int
    + getWhites(int): int
    + getValueState(): StateValue
}
usantatecla.mastermind.models.Session *-down-> usantatecla.mastermind.models.State
usantatecla.mastermind.models.Session *-down-> usantatecla.mastermind.models.Game
usantatecla.mastermind.models.Session *-down-> usantatecla.mastermind.models.Registry
usantatecla.mastermind.models.Session .down.> usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.Session .down.> usantatecla.mastermind.models.StateValue
usantatecla.mastermind.models.Session .down.> Color
@enduml

@startuml usantatecla.mastermind.types
enum usantatecla.mastermind.types.Color {
    + RED
    + BLUE
    + YELLOW
    + GREEN
    + ORANGE
    + PURPLE
    + NULL
    ~ {static} length(): int
    + isNull(): boolean
    + {static} parse(char): Color
    + toString(): String
}

enum usantatecla.mastermind.types.Error {
    + DUPLICATED
    + WRONG_CHARACTERS
    + WRONG_LENGTH
    + NULL
    + isNull(): boolean
}
@enduml

@startuml usantatecla.utils
class BufferedReader as "java.io.BufferedReader"{}
class ArrayList as "java.util.ArrayList"{}

enum usantatecla.utils.views.ColorCode{
    + RED
    + BLUE
    + YELLOW
    + GREEN
    + ORANGE
    + PURPLE
    + RESET_COLOR
    - color: String
    ~ ColorCode(String)
    + getColor(): String
    + {static} getColorByIndex(int): String
}

class usantatecla.utils.views.Console{
    - {static} console: Console
    + {static} getInstance(): Console
    + readString(String): String
    + readString(): String
    + readInt(String): int
    + readChar(String): char
    + writeln()
    + write(String)
    + writeln(String)
    + write(char)
    - writeError(String)
}
usantatecla.utils.views.Console *-down-> BufferedReader

class  usantatecla.utils.views.YesNoDialog{
    - {static} AFIRMATIVE: char
    - {static} NEGATIVE: char
    - {static} QUESTION: String
    - {static} MESSAGE: String
    + YesNoDialog()
    + read(String): boolean
    - {static} isAfirmative(char): boolean
    - {static} isNegative(char): boolean
}
usantatecla.utils.views.YesNoDialog ..> usantatecla.utils.views.Console

class  usantatecla.utils.models.ClosedInterval{
    - min: int
    - max: int
    + ClosedInterval(int, int)
    + includes(int): boolean
}

abstract  usantatecla.utils.Command{
    # title: String
    # Command(String)
    # {abstract} execute()
    # {abstract} isActive(): boolean
    ~ getTitle(): String
}

abstract  usantatecla.utils.Menu{
    - {static} OPTION: String
    - commandList: ArrayList<Command>
    + Menu()
    + execute()
    # addCommand(Command)
}
usantatecla.utils.Menu *-down-> ArrayList
usantatecla.utils.Menu *-down-> usantatecla.utils.Command
@enduml
