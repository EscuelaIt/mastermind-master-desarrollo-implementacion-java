@startuml mastermind
class View as "usantatecla.\nmastermind.views.\nView"
class ConsoleView as "usantatecla.\nmastermind.views.\nconsole.ConsoleView"
class GraphicsView as "usantatecla.\nmastermind.views.\nconsole.GraphicsView"
class Logic as "usantatecla.\nmastermind.controllers.\nLogic"
abstract class Controller as "usantatecla.\nmastermind.controllers.\nController"


class  usantatecla.mastermind.ConsoleMastermind{
    + {static} main(String[])
    # createView(): View
}
usantatecla.mastermind.Mastermind <|-down- usantatecla.mastermind.ConsoleMastermind
usantatecla.mastermind.ConsoleMastermind .down.> ConsoleView

class  usantatecla.mastermind.GraphicsMastermind{
    + {static} main(String[])
    # createView(): View
}
usantatecla.mastermind.Mastermind <|-down- usantatecla.mastermind.GraphicsMastermind
usantatecla.mastermind.GraphicsMastermind .down.> GraphicsView

abstract class  usantatecla.mastermind.Mastermind{
    # Mastermind()
    # {abstract} createView(): View
    # play()
}
usantatecla.mastermind.Mastermind *-down-> View
usantatecla.mastermind.Mastermind *-down-> Logic
usantatecla.mastermind.Mastermind .down.> Controller

@enduml

@startuml usantatecla.mastermind.views
abstract class Controller as "usantatecla.\nmastermind.controllers.\nController"
enum Color as "usantatecla.\nmastermind.types.\nColor"
enum Error as "usantatecla.\nmastermind.types.\nError"

abstract class  usantatecla.mastermind.views.ColorView{
    + {static} INITIALS: char[]
    # ColorView()
    # ColorView(Color)
    + {static} getInstance(char): Color
    + allInitials(): String
    # {abstract} resultInitials(int): String
}
usantatecla.mastermind.views.ColorView *-down-> Color

abstract class  usantatecla.mastermind.views.ErrorView{
    + MESSAGES: String[]
    # ErrorView()
    + ErrorView(Error)
    # {abstract} colorInitials(): String
}
usantatecla.mastermind.views.ErrorView *-down-> Error

enum  usantatecla.mastermind.views.Message{
    + ATTEMPTS
    + SECRET
    + RESUME
    + RESULT
    + PROPOSED_COMBINATION
    + TITLE
    + WINNER
    + LOOSER
    - message: String
    ~ MessageView(String)
    + getMessage(): String
}

abstract class  usantatecla.mastermind.views.View{
    + {abstract} interact(Controller)
}
usantatecla.mastermind.views.View .down.> Controller

@enduml

@startuml usantatecla.mastermind.console
abstract class Controller as "usantatecla.\nmastermind.controllers.\nController"
class StartController as "usantatecla.\nmastermind.controllers.\nStartController"
class ProposalController as "usantatecla.\nmastermind.controllers.\nProposalController"
class ResumeController as "usantatecla.\nmastermind.controllers.\nResumeController"
enum Error as "usantatecla.\nmastermind.types.\nError"
enum Color as "usantatecla.\nmastermind.types.\nColor"
abstract class View as "usantatecla.\nmastermind.views.\nView"
abstract class ColorView as "usantatecla.\nmastermind.views.\nColorView"
abstract class ErrorView as "usantatecla.\nmastermind.views.\nErrorView"
enum Message as "usantatecla.\nmastermind.views.\nMessageView"
class Console as "usantatecla.utils.\nConsole"
class YesNoDialog as "usantatecla.utils.\nYesNoDialog"
enum ColorCode as "usantatecla.utils.\nColorCode"

class usantatecla.mastermind.views.console.ConsoleView {
    + ConsoleView()
    + interact(Controller)
}
usantatecla.mastermind.views.console.ConsoleView -up-|> View
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.StartView
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.ProposalView
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.ResumeView
usantatecla.mastermind.views.console.ConsoleView .down.> Controller
usantatecla.mastermind.views.console.ConsoleView .down.> StartController
usantatecla.mastermind.views.console.ConsoleView .down.> ProposalController
usantatecla.mastermind.views.console.ConsoleView .down.> ResumeController

class usantatecla.mastermind.views.console.ResumeView {
    ~ interact(ResumeController)
}
usantatecla.mastermind.views.console.ResumeView .down.> ResumeController
usantatecla.mastermind.views.console.ResumeView .down.> Message
usantatecla.mastermind.views.console.ResumeView .down.> YesNoDialog

class usantatecla.mastermind.views.console.StartView {
    ~ interact(StartController)
}
usantatecla.mastermind.views.console.StartView *-down-> usantatecla.mastermind.views.console.SecretCombinationView
usantatecla.mastermind.views.console.StartView .down.> Console
usantatecla.mastermind.views.console.StartView .down.> StartController
usantatecla.mastermind.views.console.StartView .down.> Message

class usantatecla.mastermind.views.console.ProposalView {
    ~ interact(ProposalController)
}
usantatecla.mastermind.views.console.ProposalView .down.> usantatecla.mastermind.views.console.GameView
usantatecla.mastermind.views.console.ProposalView .down.> usantatecla.mastermind.views.console.ProposedCombinationView
usantatecla.mastermind.views.console.ProposalView .down.> usantatecla.mastermind.views.console.ErrorView
usantatecla.mastermind.views.console.ProposalView .down.> ProposalController
usantatecla.mastermind.views.console.ProposalView .down.> Color
usantatecla.mastermind.views.console.ProposalView .down.> Error

class usantatecla.mastermind.views.console.GameView {
    ~ GameView(ProposalController)
    ~ write()
}
usantatecla.mastermind.views.console.GameView *-down-> ProposalController
usantatecla.mastermind.views.console.GameView .down.> usantatecla.mastermind.views.console.AttemptsView
usantatecla.mastermind.views.console.GameView .down.> usantatecla.mastermind.views.console.SecretCombinationView
usantatecla.mastermind.views.console.GameView .down.> usantatecla.mastermind.views.console.ProposedCombinationView
usantatecla.mastermind.views.console.GameView .down.> usantatecla.mastermind.views.console.ResultView
usantatecla.mastermind.views.console.GameView .down.> Message
usantatecla.mastermind.views.console.GameView .down.> Console

class usantatecla.mastermind.views.console.ProposedCombinationView {
    + ProposedCombinationView(ProposalController)
    + write(int)
    + read(): List<Color>
}
usantatecla.mastermind.views.console.ProposedCombinationView *-down-> ProposalController
usantatecla.mastermind.views.console.ProposedCombinationView .down.> usantatecla.mastermind.views.console.ColorView
usantatecla.mastermind.views.console.ProposedCombinationView .down.> Color
usantatecla.mastermind.views.console.ProposedCombinationView .down.> Message
usantatecla.mastermind.views.console.ProposedCombinationView .down.> Console

class usantatecla.mastermind.views.console.SecretCombinationView {
    ~ SecretCombinationView(Controller)
    ~ writeln()
}
usantatecla.mastermind.views.console.SecretCombinationView *-down-> Controller
usantatecla.mastermind.views.console.SecretCombinationView ..> Message
usantatecla.mastermind.views.console.SecretCombinationView ..> Console

class usantatecla.mastermind.views.console.ResultView {
    + ResultView(ProposalController)
    + writeln(int)
}
usantatecla.mastermind.views.console.ResultView *-down-> ProposalController
usantatecla.mastermind.views.console.ResultView .down.> Message
usantatecla.mastermind.views.console.ResultView .down.> Console

class usantatecla.mastermind.views.console.AttemptsView {
    ~ AttemptsView(ProposalController)
    ~ writeln()
}
usantatecla.mastermind.views.console.AttemptsView *-down-> ProposalController
usantatecla.mastermind.views.console.AttemptsView .down.> Console
usantatecla.mastermind.views.console.AttemptsView .down.> Message

class usantatecla.mastermind.views.console.ColorView {
    + ColorView()
    + ColorView(Color)
    # resultInitials(int) : String
    + write()
}
usantatecla.mastermind.views.console.ColorView -up-|> ColorView
usantatecla.mastermind.views.console.ColorView .down.> ColorCode
usantatecla.mastermind.views.console.ColorView .down.> Console
usantatecla.mastermind.views.console.ColorView .down.> Color

class usantatecla.mastermind.views.console.ErrorView {
    ~ ErrorView()
    + ErrorView(Error)
    + writeln()
    # colorInitials() : String
}
usantatecla.mastermind.views.console.ErrorView -up-|> ErrorView
usantatecla.mastermind.views.console.ErrorView .down.> Error
usantatecla.mastermind.views.console.ErrorView .down.> Console
usantatecla.mastermind.views.console.ErrorView .down.> usantatecla.mastermind.views.console.ColorView

@enduml

@startuml usantatecla.mastermind.controllers
abstract class Combination as "usantatecla.\nmastermind.models.\nCombination"
class Game as "usantatecla.\nmastermind.models.\nGame"
class State as "usantatecla.\nmastermind.models.\nState"
class ProposedCombination as "usantatecla.\nmastermind.models.\nProposedCombination"
enum StateValue as "usantatecla.\nmastermind.models.\nStateValue"
enum Error as "usantatecla.\nmastermind.types.\nError"
enum Color as "usantatecla.\nmastermind.types.\nColor"

abstract class  usantatecla.mastermind.controllers.Controller{
    ~ Controller(Game, State)
    + getWidth(): int
}
usantatecla.mastermind.controllers.Controller *-down-> Game
usantatecla.mastermind.controllers.Controller *-down-> State
usantatecla.mastermind.controllers.Controller .down.> Combination

class  usantatecla.mastermind.controllers.Logic{
    + Logic()
    + getController(): Controller
}
usantatecla.mastermind.controllers.Logic *-down-> usantatecla.mastermind.controllers.Controller
usantatecla.mastermind.controllers.Logic *-down-> Game
usantatecla.mastermind.controllers.Logic *-down-> State
usantatecla.mastermind.controllers.Logic *-down-> StateValue
usantatecla.mastermind.controllers.Logic .down.> usantatecla.mastermind.controllers.ResumeController
usantatecla.mastermind.controllers.Logic .down.> usantatecla.mastermind.controllers.StartController
usantatecla.mastermind.controllers.Logic .down.> usantatecla.mastermind.controllers.PlayController

class  usantatecla.mastermind.controllers.PlayController{
    + ProposalController(Game, State)
    + addProposedCombination(List<Color>): Error
    + isWinner(): boolean
    + isLooser(): boolean
    + getAttempts(): int
    + getColors(int): List<Color>
    + getBlacks(int): int
    + getWhites(int): int
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.PlayController
usantatecla.mastermind.controllers.PlayController .down.> Combination
usantatecla.mastermind.controllers.PlayController .down.> Game
usantatecla.mastermind.controllers.PlayController .down.> State
usantatecla.mastermind.controllers.PlayController .down.> ProposedCombination
usantatecla.mastermind.controllers.PlayController .down.> Error
usantatecla.mastermind.controllers.PlayController .down.> Color

class  usantatecla.mastermind.controllers.ResumeController{
    + ResumeController(Game, State)
    + resume(boolean)
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.ResumeController
usantatecla.mastermind.controllers.ResumeController .down.> Game
usantatecla.mastermind.controllers.ResumeController .down.> State

class  usantatecla.mastermind.controllers.StartController{
    + StartController(Game, State)
    + start()
}
usantatecla.mastermind.controllers.Controller <|-down- usantatecla.mastermind.controllers.StartController
usantatecla.mastermind.controllers.StartController .down.> Game
usantatecla.mastermind.controllers.StartController .down.> State

@enduml

@startuml usantatecla.mastermind.models
enum Color as "usantatecla.\nmastermind.types.\nColor"

class usantatecla.mastermind.models.State {
    - stateValue: StateValue
    + state()
    + next()
    + reset()
    + getValueState(): StateValue
}
usantatecla.mastermind.models.State *-down-> usantatecla.mastermind.models.StateValue

enum usantatecla.mastermind.models.StateValue {
    + INITIAL
    + IN_GAME
    + FINAL
    + EXIT
}

abstract class usantatecla.mastermind.models.Combination {
    - {static} WIDTH: int
    # Combination()
    + {static} getWidth(): int
}
usantatecla.mastermind.models.Combination *-down-> "*" Color

class usantatecla.mastermind.models.Game {
    - {static} MAX_LONG: int
    - attempts: int
    + Game()
    + clear()
    + addProposeCombination(ProposedCombination)
    + isLooser(): boolean
    + isWinner(): boolean
    + getAttempts(): int
    + getProposedCombination(int): ProposedCombination
    + getResult(int): Result
}
usantatecla.mastermind.models.Game *-down-> usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.Game *-down-> "0..*" usantatecla.mastermind.models.Result
usantatecla.mastermind.models.Game *-down-> "0..*" usantatecla.mastermind.models.ProposedCombination

class usantatecla.mastermind.models.ProposedCombination {
    ~ contains(Color, int): boolean
    ~ contains(Color): boolean
    + getColors(): List<Color>
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.ProposedCombination .down.> Color

class usantatecla.mastermind.models.SecretCombination {
    ~ SecretCombination()
    ~ getResult(ProposedCombination): Result
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.SecretCombination .down.> usantatecla.mastermind.models.Result
usantatecla.mastermind.models.SecretCombination .down.> usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.SecretCombination .down.> Color

class usantatecla.mastermind.models.Result {
    - blacks: int
    - whites: int
    ~ Result(int, int)
    ~ isWinner(): boolean
    + getBlacks(): int
    + getWhites(): int
}
usantatecla.mastermind.models.Result .down.> usantatecla.mastermind.models.Combination

@enduml

@startuml usantatecla.mastermind.types
enum usantatecla.mastermind.types.Color {
    + RED
    + BLUE
    + YELLOW
    + GREEN
    + ORANGE
    + PURPLE
    + NULL
    ~ {static} length(): int
    + isNull(): boolean
}

enum usantatecla.mastermind.types.Error {
    + DUPLICATED
    + WRONG_CHARACTERS
    + WRONG_LENGTH
    + NULL
    + isNull(): boolean
}
@enduml

@startuml usantatecla.utils
class BufferedReader as "java.io.BufferedReader"{}

enum usantatecla.utils.views.ColorCode{
    + RED
    + BLUE
    + YELLOW
    + GREEN
    + ORANGE
    + PURPLE
    + RESET_COLOR
    - color: String
    ~ ColorCode(String)
    + getColor(): String
    + {static} getColorByIndex(int): String
}

class usantatecla.utils.views.Console{
    - {static} console: Console
    + {static} getInstance(): Console
    + readString(String): String
    + readString(): String
    + readInt(String): int
    + readChar(String): char
    + writeln()
    + write(String)
    + writeln(String)
    + write(char)
    - writeError(String)
}
usantatecla.utils.views.Console *-down-> BufferedReader

class  usantatecla.utils.views.YesNoDialog{
    - {static} AFIRMATIVE: char
    - {static} NEGATIVE: char
    - {static} QUESTION: String
    - {static} MESSAGE: String
    + YesNoDialog()
    + read(String): boolean
    - {static} isAfirmative(char): boolean
    - {static} isNegative(char): boolean
}
usantatecla.utils.views.YesNoDialog ..> usantatecla.utils.views.Console
@enduml
